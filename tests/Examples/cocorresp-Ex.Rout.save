
R version 3.3.2 Patched (2016-12-21 r71843) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cocorresp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cocorresp')
Loading required package: vegan
Loading required package: permute
Loading required package: lattice
This is vegan 2.4-2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("beetles")
> ### * beetles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: beetles
> ### Title: Carabid beetles and vascular plants in Dutch roadside verges
> ### Aliases: beetles plants verges
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(beetles)
> data(plants)
> 
> 
> 
> cleanEx()
> nameEx("biplots")
> ### * biplots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biplot-methods
> ### Title: Biplots of co-correspondence analysis models
> ### Aliases: biplot.symcoca biplot.predcoca
> ### Keywords: hplot methods
> 
> ### ** Examples
> 
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the beetle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## draw a biplot of the beetle results
> biplot(bp.sym)
> 
> ## biplot of both - Fig 1 in ter Braak & Schaffers (2004)
> layout(matrix(1:2, ncol = 2))
> biplot(bp.sym, which = "y1", main = "Beetles")
> biplot(bp.sym, which = "y2", main = "Plants")
> layout(1)
> 
> ## predictive CoCA
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> 
> ## draw a biplot of the response
> biplot(bp.pred)
> 
> ## recreate Fig 3 in ter Braak & Schaffers (2004)
> layout(matrix(1:2, ncol = 2))
> biplot(bp.pred, which = "response", main = "Beetles")
> biplot(bp.pred, which = "predictor", main = "Plants")
> layout(1)
> 
> 
> 
> cleanEx()
> nameEx("bryophyte")
> ### * bryophyte
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bryophyte
> ### Title: Bryophytes and vascular plants in Carpathian spring meadows
> ### Aliases: bryophyte vascular
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bryophyte)
> data(vascular)
> 
> 
> 
> cleanEx()
> nameEx("coca")
> ### * coca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coca
> ### Title: Fit Co-Correspondence Analysis Ordination Models
> ### Aliases: coca coca.formula coca.default print.predcoca print.symcoca
> ### Keywords: multivariate regression models
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## symmetric CoCA
> data(beetles)
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> data(plants)
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> bp.sym

Symmetric Co-Correspondence Analysis

Call: symcoca(y = y, x = x, n.axes = n.axes, R0 = weights, symmetric =
symmetric, nam.dat = nam.dat)

Inertia:
         Total Explained Residual
beetles:  3.99      3.97     0.02
plants:   5.76      5.74     0.02

> biplot(bp.sym)                          # produces a Benzecri biplot
> 
> ## extract eigenvalues of the analysis
> eigenvals(bp.sym)
   COCA 1    COCA 2    COCA 3    COCA 4    COCA 5    COCA 6    COCA 7    COCA 8 
0.2533802 0.1288657 0.0810520 0.0740855 0.0584979 0.0474342 0.0373292 0.0320276 
   COCA 9   COCA 10   COCA 11   COCA 12   COCA 13   COCA 14   COCA 15   COCA 16 
0.0307776 0.0232506 0.0207178 0.0184269 0.0172465 0.0160500 0.0143907 0.0118064 
  COCA 17   COCA 18   COCA 19   COCA 20   COCA 21   COCA 22   COCA 23   COCA 24 
0.0105614 0.0100427 0.0087342 0.0084752 0.0065900 0.0062827 0.0050298 0.0043860 
  COCA 25   COCA 26   COCA 27   COCA 28   COCA 29 
0.0042550 0.0034389 0.0021756 0.0009622 0.0005873 
> 
> ## correlations between beetle and plant score scores on Co-CA axes
> corAxis(bp.sym)
 COCA 1  COCA 2  COCA 3  COCA 4  COCA 5  COCA 6  COCA 7  COCA 8  COCA 9 COCA 10 
 0.9451  0.9264  0.8066  0.9309  0.8515  0.8989  0.8498  0.9247  0.8773  0.8274 
COCA 11 COCA 12 COCA 13 COCA 14 COCA 15 COCA 16 COCA 17 COCA 18 COCA 19 COCA 20 
 0.8938  0.8652  0.9392  0.8972  0.7771  0.9439  0.8924  0.6782  0.8742  0.6880 
COCA 21 COCA 22 COCA 23 COCA 24 COCA 25 COCA 26 COCA 27 COCA 28 COCA 29 
 0.6590  0.7373  0.8370  0.6960  0.8020  0.8206  0.8041  0.7783  0.9815 
> 
> ## predictive CoCA using SIMPLS and formula interface
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> ## should retain only the useful PLS components for a parsimonious model
> 
> ## Leave-one-out crossvalidation - this takes a while
> 
> ## Not run: 
> ##D crossval(beetles, plants)
> ##D ## so 2 axes are sufficient
> ##D ## permutation test to assess significant PLS components - takes a while
> ##D bp.perm <- permutest(bp.pred, permutations = 99)
> ##D bp.perm
> ## End(Not run)
> 
> ## agrees with the Leave-one-out cross-validation
> ## refit the model with only 2 PLS components
> bp.pred <- coca(beetles ~ ., data = plants, n.axes = 2)

Removed some species that contained no data in: beetles, plants 

> bp.pred

Predictive Co-Correspondence Analysis

Call: predcoca.simpls(y = y, x = x, R0 = weights, n.axes = n.axes,
nam.dat = nam.dat)

Co-CA Method: simpls

             Role Variance
beetles Predictor     5.76
plants   Response     3.99
> biplot(bp.pred)                         # plots correct scores or loadings
> 
> ## predictive CoCA using Eigen-analysis
> data(bryophyte)
> data(vascular)
> carp.pred <- coca(y = bryophyte, x = vascular, reg.method = "eigen")
> carp.pred

Predictive Co-Correspondence Analysis

Call: predcoca.eigen(y = y, x = x, R0 = weights, n.axes = n.axes,
nam.dat = nam.dat)

Co-CA Method: eigen


Eigenvalues:


 COCA 1  COCA 2  COCA 3  COCA 4  COCA 5  COCA 6  COCA 7  COCA 8  COCA 9 COCA 10 
  0.301   0.072   0.022   0.017   0.015   0.010   0.007   0.006   0.005   0.005 
COCA 11 COCA 12 COCA 13 COCA 14 COCA 15 COCA 16 COCA 17 COCA 18 COCA 19 COCA 20 
  0.004   0.004   0.003   0.003   0.003   0.003   0.002   0.002   0.002   0.002 
COCA 21 COCA 22 COCA 23 COCA 24 COCA 25 COCA 26 COCA 27 COCA 28 COCA 29 
  0.001   0.001   0.001   0.001   0.001   0.001   0.001   0.001   0.001 
> 
> ## determine important PLS components - takes a while
> ## Not run: 
> ##D crossval(bryophyte, vascular)
> ##D (carp.perm <- permutest(carp.pred, permutations = 99))
> ## End(Not run)
> 
> ## 2 components again, refit
> carp.pred <- coca(y = bryophyte, x = vascular,
+                   reg.method = "eigen", n.axes = 2)
> carp.pred

Predictive Co-Correspondence Analysis

Call: predcoca.eigen(y = y, x = x, R0 = weights, n.axes = n.axes,
nam.dat = nam.dat)

Co-CA Method: eigen


Eigenvalues:


COCA 1 COCA 2 
 0.301  0.072 
> ## drawn biplot
> biplot(carp.pred)
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("coinertia")
> ### * coinertia
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coinertia
> ### Title: Co-inertia analysis
> ### Aliases: coinertia coinertia.default
> ### Keywords: multivariate models
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> data(beetles, plants)
> coin <- coinertia(beetles, plants)
some species contain no data and were removed from data matrix y

some species contain no data and were removed from data matrix x

> coin

Coinertia Analysis

Call: coinertia.default(y = beetles, x = plants)

Eigenvalues:
 COIN1    COIN2    COIN3    COIN4    COIN5    COIN6    COIN7    COIN8   
 0.591    0.316    0.203    0.104    0.067    0.061    0.053    0.044   
 COIN9   COIN10   COIN11   COIN12   COIN13   COIN14   COIN15   COIN16   
 0.035    0.023    0.022    0.014    0.013    0.011    0.010    0.008   
COIN17   COIN18   COIN19   COIN20   COIN21   COIN22   COIN23   COIN24   
 0.007    0.005    0.004    0.003    0.003    0.002    0.002    0.002   
COIN25   COIN26   COIN27   COIN28   COIN29   
 0.001    0.001    0.001    0.000    0.000   
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("corAxis")
> ### * corAxis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corAxis
> ### Title: Correlation between ordination axes
> ### Aliases: corAxis.symcoca corAxis corAxis.default
> ### Keywords: univar
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## load some data
> data(beetles)
> data(plants)
> 
> ## log transform the beetle data
> beetles <- log(beetles + 1)
> 
> ## symmetric Co-CA model
> beetles.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## correlations between axes
> corAxis(beetles.sym)
 COCA 1  COCA 2  COCA 3  COCA 4  COCA 5  COCA 6  COCA 7  COCA 8  COCA 9 COCA 10 
 0.9451  0.9264  0.8066  0.9309  0.8515  0.8989  0.8498  0.9247  0.8773  0.8274 
COCA 11 COCA 12 COCA 13 COCA 14 COCA 15 COCA 16 COCA 17 COCA 18 COCA 19 COCA 20 
 0.8938  0.8652  0.9392  0.8972  0.7771  0.9439  0.8924  0.6782  0.8742  0.6880 
COCA 21 COCA 22 COCA 23 COCA 24 COCA 25 COCA 26 COCA 27 COCA 28 COCA 29 
 0.6590  0.7373  0.8370  0.6960  0.8020  0.8206  0.8041  0.7783  0.9815 
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("crossval")
> ### * crossval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crossval
> ### Title: Cross-validation for predictive Co-Correspondence Analysis
> ###   models
> ### Aliases: crossval print.crossval summary.crossval
> ###   print.summary.crossval
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## load the data sets
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## predictive CoCA using SIMPLS and formula interface
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> ## should retain only the useful PLS components for a
> ## parsimonious model
> 
> ## Leave-one-out crossvalidation - this takes a while
> ## Not run: 
> ##D crossval(beetles, plants)
> ## End(Not run)
> ## so 2 axes are sufficient
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("envfit.coca")
> ### * envfit.coca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: envfit.coca
> ### Title: Fit an environmental vector or factor to a Co-CA ordination
> ### Aliases: envfit.coca
> ### Keywords: multivariate htest
> 
> ### ** Examples
> 
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## load the environmental data
> data(verges)
> 
> ## fit vectors for the environmental data
> sol <- envfit(bp.sym, verges, which = "response")
> sol

***VECTORS

            COCA 1   COCA 2     r2 Pr(>r)    
Mmoisture  0.95452  0.29815 0.5749  0.001 ***
Zmoisture  0.96693  0.25503 0.5600  0.001 ***
Org        0.98775  0.15605 0.4313  0.001 ***
Sandiness -0.36950  0.92923 0.3054  0.022 *  
pH         0.24370 -0.96985 0.3911  0.002 ** 
NO3        0.48984 -0.87181 0.2290  0.043 *  
NH4       -0.68741  0.72627 0.2105  0.067 .  
Nmin       0.19562 -0.98068 0.0216  0.777    
P         -0.60334  0.79749 0.4050  0.005 ** 
K         -0.80614  0.59173 0.3329  0.007 ** 
Nitr       0.50795 -0.86139 0.3048  0.014 *  
HourSun   -0.83884 -0.54438 0.0889  0.337    
Warmth35  -0.98159  0.19098 0.0383  0.624    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Permutation: free
Number of permutations: 999


> 
> ## plot the response matrix and the fitted vectors
> biplot(bp.sym, which = "y1")
> plot(sol)
> 
> 
> 
> cleanEx()
> nameEx("fitted.symcoca")
> ### * fitted.symcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitted.symcoca
> ### Title: Fitted values of a Symmetric Co-Correpsondence analysis model.
> ### Aliases: fitted.symcoca print.fitted.symcoca
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## fitted values
> bp.fit <- fitted(bp.sym)
> 
> ## fitted values for beetles only
> beetle.fit <- fitted(bp.sym, which = "y1")
> 
> 
> 
> cleanEx()
> nameEx("loadings")
> ### * loadings
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadings
> ### Title: CoCA species loadings
> ### Aliases: loadings lodaings.default loadings.predcoca loadings.symcoca
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## symmetric CoCA
> data(beetles)
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> data(plants)
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## extract the loadings
> lds <- loadings(bp.sym)
> head(lds[["Y"]])                        # loadings for the Y_1 matrix
           COCA 1  COCA 2   COCA 3  COCA 4  COCA 5  COCA 6  COCA 7   COCA 8
ACUPAEXI -0.20433 -2.3498  0.76183 -1.0127  1.4034 -2.5364  3.0100 -1.04927
ACUPAFLA  2.41972  1.8627  4.41465 -3.5657 -1.7423  1.0069 -1.2161 -0.61023
ACUPAMER -0.08044 -1.6561 -0.70618  0.1282 -0.7759  0.9211 -0.2393  0.16375
ACUPPARV -0.35028 -2.3408 -0.54588 -1.1433 -0.2107  1.5491 -1.1002  0.77127
AGONUDOR -0.94516 -0.4898  0.06219 -0.1248 -0.1782  1.7137  1.2734  0.85400
AGONUMAR -1.17993  1.8149 -0.57044  0.4099 -0.5633  3.1117  4.2546  0.07285
          COCA 9 COCA 10   COCA 11   COCA 12 COCA 13   COCA 14   COCA 15
ACUPAEXI  0.2879 -3.5468 -0.006264 -0.009975  0.4322  0.006181  2.398233
ACUPAFLA  1.0450 -2.9776  1.808148  0.799091  1.3346 -0.487961 -0.008534
ACUPAMER  0.8502 -0.6213  0.046045  2.435928  0.9016 -0.607928 -1.364512
ACUPPARV  0.7625  0.3012  0.345524 -0.402013 -1.2806 -0.775343  0.278058
AGONUDOR -1.3710 -1.2102 -0.483949 -0.447292 -0.0550  0.597343  0.638313
AGONUMAR  0.5489 -0.4140 -0.381092 -1.194910 -0.9777  2.240623 -0.366266
         COCA 16 COCA 17  COCA 18 COCA 19 COCA 20 COCA 21 COCA 22  COCA 23
ACUPAEXI -0.7641 -3.9594  3.32941 -3.8922  -2.174  0.6124  0.7720 -2.23477
ACUPAFLA  0.9329  3.6454 -1.60903  0.5133  -2.868  2.9343 -0.5537 -1.40914
ACUPAMER  1.1023 -2.4022  1.57618  3.5603  -4.553  0.6857 -3.5433 -4.42921
ACUPPARV  0.7979 -0.7522  0.53157 -0.8950  -1.016 -0.1105 -0.2904 -0.52682
AGONUDOR -0.1244 -0.4620  0.68838  0.5493  -1.459 -0.4355 -0.2117 -0.09072
AGONUMAR  0.3160  0.7134 -0.01793 -1.4123   2.530  2.4812 -3.5288 -1.71179
         COCA 24 COCA 25 COCA 26 COCA 27  COCA 28 COCA 29
ACUPAEXI  0.1135 -0.6765   1.510 -0.4866  0.43469  3.7077
ACUPAFLA  1.3515 -1.5095   1.172  0.1704  0.51336 -0.3939
ACUPAMER  8.0862  6.5713 -21.853 18.5783 -2.57428 -1.0913
ACUPPARV  1.8835 -0.1173  -1.050  0.5223  0.09321  0.2501
AGONUDOR  1.8146  0.3052  -0.347  0.4452  0.81912  0.1377
AGONUMAR  0.8812 -1.8526  -1.118 -1.0975  1.56669  0.8840
> str(lds)
List of 2
 $ Y: num [1:91, 1:29] -0.2043 2.4197 -0.0804 -0.3503 -0.9452 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:91] "ACUPAEXI" "ACUPAFLA" "ACUPAMER" "ACUPPARV" ...
  .. ..$ : chr [1:29] "COCA 1" "COCA 2" "COCA 3" "COCA 4" ...
 $ X: num [1:173, 1:29] -1.297 -2.383 0.872 -0.692 1.227 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:173] "achimill" "agrocapi" "agrostol" "allivine" ...
  .. ..$ : chr [1:29] "COCA 1" "COCA 2" "COCA 3" "COCA 4" ...
> 
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("permutest.coca")
> ### * permutest.coca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permutest.coca
> ### Title: Permutation test for predictive co-correspondence analysis
> ###   models
> ### Aliases: permutest.coca print.permutest.coca summary.permutest.coca
> ###   print.summary.permutest.coca
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## load some data
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> ## predictive CoCA using SIMPLS and formula interface
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> 
> ## should retain only the useful PLS components for a parsimonious model
> ## Not run: 
> ##D ## Leave-one-out crossvalidation - this takes a while
> ##D crossval(beetles, plants)
> ##D ## so 2 axes are sufficient
> ##D 
> ##D ## permutation test to assess significant PLS components - takes a while
> ##D bp.perm <- permutest(bp.pred, permutations = 99)
> ##D bp.perm
> ##D summary(bp.perm)
> ## End(Not run)
> 
> ## permutation test, this time only testing the first 2 axes
> bp.perm <- permutest(bp.pred, permutations = 75, n.axes = 2)
Permutations for axis: 1 - completed
Permutations for axis: 2 - completed
> bp.perm

Permutation test for predictive co-correspondence analysis:

Call: permutest.coca(x = bp.pred, permutations = 75, n.axes = 2)

Permutation test results:

         Stat. Inertia     Fit   % fit P-value
COCA 1  0.1146  3.9883  0.4102 10.2843    0.01
COCA 2  0.0966  3.5782  0.3153  7.9068    0.01

> 
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot.predcoca")
> ### * plot.predcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.predcoca
> ### Title: Biplots for predictive co-correspondence analysis
> ### Aliases: plot.predcoca
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## predictive CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the beetle data
> beetles <- log(beetles + 1)
> 
> ## predictive CoCA using SIMPLS and formula interface
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> 
> ## draw the plot for the response scores
> plot(bp.pred)
> 
> ## plot of both
> layout(matrix(1:2, ncol = 2))
> plot(bp.pred, which = "response", main = "Beetles")
> plot(bp.pred, which = "predictor", main = "Plants")
> layout(1)
> 
> 
> 
> cleanEx()
> nameEx("plot.symcoca")
> ### * plot.symcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.symcoca
> ### Title: Plots for symmetric co-correspondence analysis
> ### Aliases: plot.symcoca
> ### Keywords: hplot methods
> 
> ### ** Examples
> 
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the beetle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## draw a plot of the response scores
> plot(bp.sym)
> 
> ## plot of both
> layout(matrix(1:2, ncol = 2))
> plot(bp.sym, which = "response", main = "Beetles")
> plot(bp.sym, which = "predictor", main = "Plants")
> layout(1)
> 
> 
> 
> cleanEx()
> nameEx("points.coca")
> ### * points.coca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: points.coca
> ### Title: Add points to a Co-CA plot
> ### Aliases: points.coca
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## symmetric CoCA
> data(beetles)
> data(plants)
>      
> ## log transform the bettle data
> beetles <- log(beetles + 1)
>      
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## draw a plot of the response scores
> plot(bp.sym, type = "none")
> points(bp.sym, display = "sites", col = "blue", pch = 16)
> points(bp.sym, display = "species", col = "red", pch = 3, cex = 0.8)
> 
> 
> 
> cleanEx()
> nameEx("rescale")
> ### * rescale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rescale
> ### Title: Rescales CoCA species scores
> ### Aliases: rescale rescale.default rescale.symcoca
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> data(bryophyte)
> data(vascular)
> 
> bryo.sym <- coca(bryophyte ~ ., data = vascular, method = "symmetric")
> 
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("resid.symcoca")
> ### * resid.symcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resid.symcoca
> ### Title: Extract Model Residuals
> ### Aliases: resid.symcoca
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> data(bryophyte)
> data(vascular)
> bryo.sym <- coca(bryophyte ~ ., data = vascular, method = "symmetric")
> eps <- resid(bryo.sym)
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("scores.predcoca")
> ### * scores.predcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scores-methods
> ### Title: Get Species or Site Scores from an Ordination
> ### Aliases: scores.predcoca scores.symcoca
> ### Keywords: multivariate methods
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## load some data
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## fit the model, a symmetric CoCA
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## extract the scores
> scr <- scores(bp.sym)
> 
> ## predictive CoCA using SIMPLS and formula interface
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> scr2 <- scores(bp.pred)
> 
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("screeplot.symcoca")
> ### * screeplot.symcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: screeplot.symcoca
> ### Title: Screeplot for symmetric co-correspondence analysis
> ### Aliases: screeplot.symcoca
> ### Keywords: hplot methods
> 
> ### ** Examples
> 
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## draw a screeplot of the eignevalues
> screeplot(bp.sym)
> 
> 
> 
> 
> cleanEx()
> nameEx("summary.predcoca")
> ### * summary.predcoca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary-methods
> ### Title: Summarizing Co-CA Model Fits
> ### Aliases: summary.predcoca print.summary.predcoca summary.symcoca
> ###   print.summary.symcoca
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> summary(bp.sym)

Symmetric Co-Correspondence Analysis

Call: symcoca(y = y, x = x, n.axes = n.axes, R0 = weights, symmetric =
symmetric, nam.dat = nam.dat)

Inertia:
         Total Explained Residual
beetles:  3.99      3.97     0.02
plants:   5.76      5.74     0.02

Eigenvalues:
 COCA 1   COCA 2   COCA 3   COCA 4   COCA 5   COCA 6   COCA 7   COCA 8  
  0.253    0.129    0.081    0.074    0.058    0.047    0.037    0.032  
 COCA 9  COCA 10  COCA 11  COCA 12  COCA 13  COCA 14  COCA 15  COCA 16  
  0.031    0.023    0.021    0.018    0.017    0.016    0.014    0.012  
COCA 17  COCA 18  COCA 19  COCA 20  COCA 21  COCA 22  COCA 23  COCA 24  
  0.011    0.010    0.009    0.008    0.007    0.006    0.005    0.004  
COCA 25  COCA 26  COCA 27  COCA 28  COCA 29  
  0.004    0.003    0.002    0.001    0.001  
> 
> ## Predictive CoCA
> bp.pred <- coca(beetles ~ ., data = plants)

Removed some species that contained no data in: beetles, plants 

> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("weights")
> ### * weights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weights.symcoca
> ### Title: Exctract CoCA model weights
> ### Aliases: weights.symcoca weights.predcoca
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> ## Don't show: 
> od <- options(digits = 4)
> ## End(Don't show)
> ## symmetric CoCA
> data(beetles)
> data(plants)
> 
> ## log transform the bettle data
> beetles <- log(beetles + 1)
> 
> ## fit the model
> bp.sym <- coca(beetles ~ ., data = plants, method = "symmetric")

Removed some species that contained no data in: beetles, plants 

> 
> ## weights == R[0]
> weights(bp.sym)
 [1] 0.035489 0.066825 0.059489 0.016669 0.014273 0.035410 0.043867 0.041651
 [9] 0.041095 0.027423 0.015292 0.031494 0.015375 0.020180 0.044767 0.005187
[17] 0.039421 0.046358 0.035868 0.061151 0.030418 0.032824 0.021131 0.045564
[25] 0.044300 0.047454 0.033503 0.034276 0.002230 0.011013
> ## Don't show: 
> options(od)
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  12.393 0.047 12.495 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
